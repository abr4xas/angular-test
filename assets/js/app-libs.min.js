/**
 * angular-test - Prueba básica de AngularJS usando las guías de estilo de John Papa con JSONPlaceholder
 * @author Angel Cruz <me@abr4xas.org> (http://abr4xas.org)
 * @version v1.0.0
 * @link 
 */

(function () {
    'use strict';
    angular
        .module('cfapp', ['ui.router','ngResource','apiRest']);
})();
(function () {
    'use strict';
    angular
        .module('apiRest', [])
        .factory('GetPostFactory', GetPostService)
        .factory('GetPostDetailFactory', GetPostDetailService)
        .factory('GetCommentsFactory', GetCommentsService);

    GetPostService.$injector = ['$resource'];
    GetPostDetailService.$injector = ['$resource'];
    GetCommentsService.$injector = ['$resource'];

    function GetPostService($resource) {
        return $resource('http://jsonplaceholder.typicode.com/posts');
    }
    // Detalles de la publicacion
    function GetPostDetailService($resource) {
        return $resource('http://jsonplaceholder.typicode.com/posts/:id', {
            id: '@id'
        });
    }
    
    // Comentarios de la publicacion
    function GetCommentsService($resource) {
        return $resource('http://jsonplaceholder.typicode.com/posts/:id/comments', {
            id: '@id'
        });
    }
    
})();
(function () {
    'use strict';
    angular
        .module('cfapp')
        .controller('postCtrl', Post)
        .controller('detailCtrl', Detail)
        .controller('commentsCtrl', Comments);

    Post.$inject = ['GetPostFactory'];
    Detail.$inject = ['GetPostDetailFactory', '$stateParams'];
    Comments.$inject = ['GetCommentsFactory', '$stateParams'];

    function Post(GetPostFactory) {
        var vm = this;
        vm.entries = [];
        execute();
        function execute() {
            return new ObtenerPost();
        }
        function ObtenerPost() {
            return GetPostFactory.query(function (data) {
                vm.entries = data;
                //console.log(data);
                vm.entries;
            }); // regresa todas las publicaciones
        }
    }

    function Detail(GetPostDetailService, $stateParams) {
        var vm = this;
        vm.entry;
        vm.id = $stateParams.id;
        execute();
        function execute() {
            return new ObtenerPostDetalle();
        }
        function ObtenerPostDetalle() {
            return GetPostDetailService.get({ id: vm.id }, function (data) {
                vm.entry = data;
                //console.log(data);
                vm.entry;
            });
        }
    }
    function Comments(GetCommentsFactory, $stateParams) {
        var vm = this;
        vm.comment;
        vm.id = $stateParams.id;
        execute();
        function execute() {
            return new ObtenerComentarios();
        }
        function ObtenerComentarios() {
            return GetCommentsFactory.query({ id: vm.id }, function (data) {
                vm.comment = data;
                //console.log(data);
                vm.comment;
            });
        }

    }

})();
(function () {
    'use strict';
    angular
        .module('cfapp')
        .config(routes)
        .run(removerCache);

    // Inyectando dependencias.
    routes.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];
    /**
     * @description gestiona las rutas de la aplicación.
     * @param $stateProvider
     * @param $urlRouterProvider
     */
    function routes($stateProvider, $urlRouterProvider, $locationProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider
            .state('home', {
                url: '/',
                controller: 'postCtrl',
                controllerAs: 'ctrl',
                templateUrl: './templates/home/home_tpl.html'
            })
            .state('post', {
                url: '/post/:id',
                views: {
                    post: {
                        controller: 'detailCtrl',
                        controllerAs: 'ctrl',
                        templateUrl: './templates/detail/post_detail_tpl.html'
                    },
                    comments: {
                        controller: 'commentsCtrl',
                        controllerAs: 'ctrl',
                        templateUrl: './templates/comments/comments_tpl.html'
                    }
                }
            });
        $locationProvider.html5Mode(false);
    }
    // Inyectando dependencias.
    removerCache.$inject = ['$rootScope', '$templateCache'];
    /**
     * @description Remueve el cache al detectar que un cambio de ruta comienza.
     * @param $rootScope
     * @param $templateCache
     */
    function removerCache($rootScope, $templateCache) {
        $rootScope.$on('$routeChangeStart', function (event, next, current) {
            if (typeof (current) !== 'undefined') {
                $templateCache.remove(current.templateUrl);
            }
        });
    }

})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNmYXBwLm1vZHVsZS5qcyIsImNmYXBwLnNlcnZpY2VzLmpzIiwiY2ZhcHAuY29udHJvbGxlci5qcyIsImNmYXBwLnJvdXRlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQzdCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUM5REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJhcHAtbGlicy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2NmYXBwJywgWyd1aS5yb3V0ZXInLCduZ1Jlc291cmNlJywnYXBpUmVzdCddKTtcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdhcGlSZXN0JywgW10pXG4gICAgICAgIC5mYWN0b3J5KCdHZXRQb3N0RmFjdG9yeScsIEdldFBvc3RTZXJ2aWNlKVxuICAgICAgICAuZmFjdG9yeSgnR2V0UG9zdERldGFpbEZhY3RvcnknLCBHZXRQb3N0RGV0YWlsU2VydmljZSlcbiAgICAgICAgLmZhY3RvcnkoJ0dldENvbW1lbnRzRmFjdG9yeScsIEdldENvbW1lbnRzU2VydmljZSk7XG5cbiAgICBHZXRQb3N0U2VydmljZS4kaW5qZWN0b3IgPSBbJyRyZXNvdXJjZSddO1xuICAgIEdldFBvc3REZXRhaWxTZXJ2aWNlLiRpbmplY3RvciA9IFsnJHJlc291cmNlJ107XG4gICAgR2V0Q29tbWVudHNTZXJ2aWNlLiRpbmplY3RvciA9IFsnJHJlc291cmNlJ107XG5cbiAgICBmdW5jdGlvbiBHZXRQb3N0U2VydmljZSgkcmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZSgnaHR0cDovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vcG9zdHMnKTtcbiAgICB9XG4gICAgLy8gRGV0YWxsZXMgZGUgbGEgcHVibGljYWNpb25cbiAgICBmdW5jdGlvbiBHZXRQb3N0RGV0YWlsU2VydmljZSgkcmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZSgnaHR0cDovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vcG9zdHMvOmlkJywge1xuICAgICAgICAgICAgaWQ6ICdAaWQnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyBDb21lbnRhcmlvcyBkZSBsYSBwdWJsaWNhY2lvblxuICAgIGZ1bmN0aW9uIEdldENvbW1lbnRzU2VydmljZSgkcmVzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZSgnaHR0cDovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vcG9zdHMvOmlkL2NvbW1lbnRzJywge1xuICAgICAgICAgICAgaWQ6ICdAaWQnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgYW5ndWxhclxuICAgICAgICAubW9kdWxlKCdjZmFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdwb3N0Q3RybCcsIFBvc3QpXG4gICAgICAgIC5jb250cm9sbGVyKCdkZXRhaWxDdHJsJywgRGV0YWlsKVxuICAgICAgICAuY29udHJvbGxlcignY29tbWVudHNDdHJsJywgQ29tbWVudHMpO1xuXG4gICAgUG9zdC4kaW5qZWN0ID0gWydHZXRQb3N0RmFjdG9yeSddO1xuICAgIERldGFpbC4kaW5qZWN0ID0gWydHZXRQb3N0RGV0YWlsRmFjdG9yeScsICckc3RhdGVQYXJhbXMnXTtcbiAgICBDb21tZW50cy4kaW5qZWN0ID0gWydHZXRDb21tZW50c0ZhY3RvcnknLCAnJHN0YXRlUGFyYW1zJ107XG5cbiAgICBmdW5jdGlvbiBQb3N0KEdldFBvc3RGYWN0b3J5KSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZtLmVudHJpZXMgPSBbXTtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgICAgICBmdW5jdGlvbiBleGVjdXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPYnRlbmVyUG9zdCgpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIE9idGVuZXJQb3N0KCkge1xuICAgICAgICAgICAgcmV0dXJuIEdldFBvc3RGYWN0b3J5LnF1ZXJ5KGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdm0uZW50cmllcyA9IGRhdGE7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICB2bS5lbnRyaWVzO1xuICAgICAgICAgICAgfSk7IC8vIHJlZ3Jlc2EgdG9kYXMgbGFzIHB1YmxpY2FjaW9uZXNcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIERldGFpbChHZXRQb3N0RGV0YWlsU2VydmljZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAgIHZtLmVudHJ5O1xuICAgICAgICB2bS5pZCA9ICRzdGF0ZVBhcmFtcy5pZDtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgICAgICBmdW5jdGlvbiBleGVjdXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPYnRlbmVyUG9zdERldGFsbGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBPYnRlbmVyUG9zdERldGFsbGUoKSB7XG4gICAgICAgICAgICByZXR1cm4gR2V0UG9zdERldGFpbFNlcnZpY2UuZ2V0KHsgaWQ6IHZtLmlkIH0sIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdm0uZW50cnkgPSBkYXRhO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAgICAgdm0uZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBDb21tZW50cyhHZXRDb21tZW50c0ZhY3RvcnksICRzdGF0ZVBhcmFtcykge1xuICAgICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgICB2bS5jb21tZW50O1xuICAgICAgICB2bS5pZCA9ICRzdGF0ZVBhcmFtcy5pZDtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgICAgICBmdW5jdGlvbiBleGVjdXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBPYnRlbmVyQ29tZW50YXJpb3MoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBPYnRlbmVyQ29tZW50YXJpb3MoKSB7XG4gICAgICAgICAgICByZXR1cm4gR2V0Q29tbWVudHNGYWN0b3J5LnF1ZXJ5KHsgaWQ6IHZtLmlkIH0sIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdm0uY29tbWVudCA9IGRhdGE7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICB2bS5jb21tZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBhbmd1bGFyXG4gICAgICAgIC5tb2R1bGUoJ2NmYXBwJylcbiAgICAgICAgLmNvbmZpZyhyb3V0ZXMpXG4gICAgICAgIC5ydW4ocmVtb3ZlckNhY2hlKTtcblxuICAgIC8vIElueWVjdGFuZG8gZGVwZW5kZW5jaWFzLlxuICAgIHJvdXRlcy4kaW5qZWN0ID0gWyckc3RhdGVQcm92aWRlcicsICckdXJsUm91dGVyUHJvdmlkZXInLCAnJGxvY2F0aW9uUHJvdmlkZXInXTtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gZ2VzdGlvbmEgbGFzIHJ1dGFzIGRlIGxhIGFwbGljYWNpw7NuLlxuICAgICAqIEBwYXJhbSAkc3RhdGVQcm92aWRlclxuICAgICAqIEBwYXJhbSAkdXJsUm91dGVyUHJvdmlkZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByb3V0ZXMoJHN0YXRlUHJvdmlkZXIsICR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xuICAgICAgICAkc3RhdGVQcm92aWRlclxuICAgICAgICAgICAgLnN0YXRlKCdob21lJywge1xuICAgICAgICAgICAgICAgIHVybDogJy8nLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwb3N0Q3RybCcsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY3RybCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcuL3RlbXBsYXRlcy9ob21lL2hvbWVfdHBsLmh0bWwnXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnN0YXRlKCdwb3N0Jywge1xuICAgICAgICAgICAgICAgIHVybDogJy9wb3N0LzppZCcsXG4gICAgICAgICAgICAgICAgdmlld3M6IHtcbiAgICAgICAgICAgICAgICAgICAgcG9zdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2RldGFpbEN0cmwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY3RybCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4vdGVtcGxhdGVzL2RldGFpbC9wb3N0X2RldGFpbF90cGwuaHRtbCdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tbWVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdjb21tZW50c0N0cmwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnY3RybCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy4vdGVtcGxhdGVzL2NvbW1lbnRzL2NvbW1lbnRzX3RwbC5odG1sJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZShmYWxzZSk7XG4gICAgfVxuICAgIC8vIElueWVjdGFuZG8gZGVwZW5kZW5jaWFzLlxuICAgIHJlbW92ZXJDYWNoZS4kaW5qZWN0ID0gWyckcm9vdFNjb3BlJywgJyR0ZW1wbGF0ZUNhY2hlJ107XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIFJlbXVldmUgZWwgY2FjaGUgYWwgZGV0ZWN0YXIgcXVlIHVuIGNhbWJpbyBkZSBydXRhIGNvbWllbnphLlxuICAgICAqIEBwYXJhbSAkcm9vdFNjb3BlXG4gICAgICogQHBhcmFtICR0ZW1wbGF0ZUNhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlckNhY2hlKCRyb290U2NvcGUsICR0ZW1wbGF0ZUNhY2hlKSB7XG4gICAgICAgICRyb290U2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgbmV4dCwgY3VycmVudCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAoY3VycmVudCkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgJHRlbXBsYXRlQ2FjaGUucmVtb3ZlKGN1cnJlbnQudGVtcGxhdGVVcmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
