/**
 * angular-test - Prueba básica de AngularJS usando las guías de estilo de John Papa con JSONPlaceholder
 * @author Angel Cruz <me@abr4xas.org> (http://abr4xas.org)
 * @version v1.0.2
 * @link 
 */

(function () {
    'use strict';
    angular
        .module('cfapp', ['ui.router','ngResource','apiRest']);
})();
(function () {
    'use strict';
    angular
        .module('apiRest', [])
        .factory('GetPostFactory', GetPostService)
        .factory('GetPostDetailFactory', GetPostDetailService)
        .factory('GetCommentsFactory', GetCommentsService);

    GetPostService.$injector = ['$resource'];
    GetPostDetailService.$injector = ['$resource'];
    GetCommentsService.$injector = ['$resource'];

    function GetPostService($resource) {
        return $resource('http://jsonplaceholder.typicode.com/posts');
    }
    // Detalles de la publicacion
    function GetPostDetailService($resource) {
        return $resource('http://jsonplaceholder.typicode.com/posts/:id', {
            id: '@id'
        });
    }
    
    // Comentarios de la publicacion
    function GetCommentsService($resource) {
        return $resource('http://jsonplaceholder.typicode.com/posts/:id/comments', {
            id: '@id'
        });
    }
    
})();
(function () {
    'use strict';
    angular
        .module('cfapp')
        .controller('postCtrl', Post)
        .controller('detailCtrl', Detail)
        .controller('commentsCtrl', Comments);

    Post.$inject = ['GetPostFactory'];
    Detail.$inject = ['GetPostDetailFactory', '$stateParams'];
    Comments.$inject = ['GetCommentsFactory', '$stateParams'];

    function Post(GetPostFactory) {
        var vm = this;
        vm.entries = [];
        vm.loading = true;
        execute();
        function execute() {
            return new ObtenerPost();
        }
        function ObtenerPost() {
            return GetPostFactory.query(function (data) {
                vm.entries = data;
                //console.log(data);
                vm.entries;
                vm.loading = false;
            }, function (e) {
                vm.loading = false;
            }); // regresa todas las publicaciones
        }
    } // End Post

    function Detail(GetPostDetailService, $stateParams) {
        var vm = this;
        vm.entry;
        vm.id = $stateParams.id;
        vm.loading = true;
        execute();
        function execute() {
            return new ObtenerPostDetalle();
        }
        function ObtenerPostDetalle() {
            return GetPostDetailService.get({ id: vm.id }, function (data) {
                vm.entry = data;
                //console.log(data);
                vm.entry;
                vm.loading = false;
            }, function (e) {
                vm.loading = false;
            }); // regresa contenido del post
        }
    } // End Detail

    function Comments(GetCommentsFactory, $stateParams) {
        var vm = this;
        vm.comment;
        vm.id = $stateParams.id;
        vm.loading = true;
        execute();
        function execute() {
            return new ObtenerComentarios();
        }
        function ObtenerComentarios() {
            return GetCommentsFactory.query({ id: vm.id }, function (data) {
                vm.comment = data;
                //console.log(data);
                vm.comment;
                vm.loading = false;
            }, function (e) {
                vm.loading = false;
            }); // regresa los comentarios relacionados al post
        }

    } // End Comments

})();
(function () {
    'use strict';
    angular
        .module('cfapp')
        .config(routes)
        .run(removerCache);

    // Inyectando dependencias.
    routes.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];
    /**
     * @description gestiona las rutas de la aplicación.
     * @param $stateProvider
     * @param $urlRouterProvider
     */
    function routes($stateProvider, $urlRouterProvider, $locationProvider) {
        $urlRouterProvider.otherwise('/');
        $stateProvider
            .state('home', {
                url: '/',
                controller: 'postCtrl',
                controllerAs: 'ctrl',
                templateUrl: './templates/home/home_tpl.html'
            })
            .state('post', {
                url: '/post/:id',
                views: {
                    post: {
                        controller: 'detailCtrl',
                        controllerAs: 'ctrl',
                        templateUrl: './templates/detail/post_detail_tpl.html'
                    },
                    comments: {
                        controller: 'commentsCtrl',
                        controllerAs: 'ctrl',
                        templateUrl: './templates/comments/comments_tpl.html'
                    }
                }
            });
        $locationProvider.html5Mode(false);
    } // End routes
    
    // Inyectando dependencias.
    removerCache.$inject = ['$rootScope', '$templateCache'];
    /**
     * @description Remueve el cache al detectar que un cambio de ruta comienza.
     * @param $rootScope
     * @param $templateCache
     */
    function removerCache($rootScope, $templateCache) {
        $rootScope.$on('$routeChangeStart', function (event, next, current) {
            if (typeof (current) !== 'undefined') {
                $templateCache.remove(current.templateUrl);
            }
        });
    } // End removerCache

})();
//# sourceMappingURL=data:application/json;base64,
